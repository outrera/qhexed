/*
 * QHexEd - Simple Qt Based Hex Editor
 *
 * Copyright (C) 2007 Nikita Sadkov
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * This code is free software.  You may redistribute copies of it under the terms of
 * the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
 * There is NO WARRANTY, to the extent permitted by law.
*/

#ifndef HEXNET_H
#define HEXNET_H

#include <QHash>
#include <QVector>
#include <QString>
#include <QStack>
#include <HexPlugin.h>

template <class Key, class T>
class MultiHash : public QHash<Key, T>
{
public:
    MultiHash() {}
    MultiHash(const QHash<Key, T> &other) : QHash<Key, T>(other) {}

    inline typename QHash<Key, T>::iterator replace(const Key &key, const T &value)
    { return QHash<Key, T>::insert(key, value); }

    inline typename QHash<Key, T>::iterator insert(const Key &key, const T &value)
    { return QHash<Key, T>::insertMulti(key, value); }

    inline MultiHash &operator+=(const MultiHash &other)
    { unite(other); return *this; }
    inline MultiHash operator+(const MultiHash &other) const
    { MultiHash result = *this; result += other; return result; }

#ifndef Q_NO_USING_KEYWORD
    using QHash<Key, T>::contains;
    using QHash<Key, T>::remove;
    using QHash<Key, T>::count;
    using QHash<Key, T>::find;
    using QHash<Key, T>::constFind;
#else
    inline bool contains(const Key &key) const
    { return QHash<Key, T>::contains(key); }
    inline int remove(const Key &key)
    { return QHash<Key, T>::remove(key); }
    inline int count(const Key &key) const
    { return QHash<Key, T>::count(key); }
    inline int count() const
    { return QHash<Key, T>::count(); }
    inline typename QHash<Key, T>::iterator find(const Key &key)
    { return QHash<Key, T>::find(key); }
    inline typename QHash<Key, T>::const_iterator find(const Key &key) const
    { return QHash<Key, T>::find(key); }
    inline typename QHash<Key, T>::const_iterator constFind(const Key &key) const
    { return QHash<Key, T>::constFind(key); }
#endif

    bool contains(const Key &key, const T &value) const;

    int remove(const Key &key, const T &value);

    int count(const Key &key, const T &value) const;

    typename QHash<Key, T>::iterator find(const Key &key, const T &value) {
        typename QHash<Key, T>::iterator i(find(key));
        typename QHash<Key, T>::iterator end(this->end());
        while (i != end && i.key() == key) {
            if (i.value() == value)
                return i;
            ++i;
        }
        return end;
    }
    typename QHash<Key, T>::const_iterator find(const Key &key, const T &value) const {
        typename QHash<Key, T>::const_iterator i(constFind(key));
        typename QHash<Key, T>::const_iterator end(QHash<Key, T>::constEnd());
        while (i != end && i.key() == key) {
            if (i.value() == value)
                return i;
            ++i;
        }
        return end;
    }
    typename QHash<Key, T>::const_iterator constFind(const Key &key, const T &value) const
        { return find(key, value); }
private:
    T &operator[](const Key &key);
    const T operator[](const Key &key) const;
};

template <class Key, class T>
Q_INLINE_TEMPLATE bool MultiHash<Key, T>::contains(const Key &key, const T &value) const
{
    return constFind(key, value) != QHash<Key, T>::constEnd();
}

template <class Key, class T>
Q_INLINE_TEMPLATE int MultiHash<Key, T>::remove(const Key &key, const T &value)
{
    int n = 0;
    typename QHash<Key, T>::iterator i(find(key));
    typename QHash<Key, T>::const_iterator end(QHash<Key, T>::constEnd());
    while (i != end && i.key() == key) {
        if (i.value() == value) {
            i = erase(i);
            ++n;
        } else {
            ++i;
        }
    }
    return n;
}

template <class Key, class T>
Q_INLINE_TEMPLATE int MultiHash<Key, T>::count(const Key &key, const T &value) const
{
    int n = 0;
    typename QHash<Key, T>::const_iterator i(constFind(key));
    typename QHash<Key, T>::const_iterator end(QHash<Key, T>::constEnd());
    while (i != end && i.key() == key) {
        if (i.value() == value)
            ++n;
        ++i;
    }
    return n;
}


template <typename TNode, typename TLabel=int> class HexGraph {
public:

	class Node;

	struct Command {
		Node *src;
		int sig;
		Node *dst;
		void *data;
	};

	typedef QStack<Command> Stack;
	typedef QVector<TNode*> NodeList;
	typedef QHash<Node*,TLabel> NodeTable;
	typedef MultiHash<int,Node*> ConnTable;
	typedef QHash<Node*,ConnTable> NodeConns;

	class Node {
	public:
		enum {
			BASE_NODE,
			USER_NODE,
		};

		enum {
			USER_SIGNAL,
		};

		Node(HexGraph *g) {
#ifndef HEX_GRAPH_STATIC
			mGraph = g;
#endif
			nodes()[this] = regLabel();
		}

		Node(HexGraph *g, TLabel label) {
#ifndef HEX_GRAPH_STATIC
			mGraph = g;
#endif
			nodes()[this] = label;
		}

		virtual ~Node() {
			clearConns();
			nodes().remove(this);
		}

		virtual int nodeType() {
			return BASE_NODE;
		}

		HexGraph *graph() {
#ifndef HEX_GRAPH_STATIC
			return mGraph;
#else
			return &HexGraph::graph();
#endif
		}

		void setLabel(TLabel label) {
			nodes()[this] = label;
		}

		void clearConns() {
			conns().remove(this);
		}

		void conn(int sig, Node *dst) {
			conns()[this].insertMulti(sig, dst);
		}

		template <typename T0, typename T1> void removeByValue(T0 &hash, T1 &val) {
			typename T0::iterator i = hash.begin();
			while(i != hash.end()) {
				if(i.value() == val) i = hash.erase(i);
				else i++;
			}
		}

		void dconn(Node *dst) {
			typename NodeConns::iterator i = conns().find(this);
			if(i == conns().end()) return;
			removeByValue(*i, dst);
			if(i->size() == 0) conns().remove(this);
		}

		void dconn(int sig, Node *dst) {
			typename NodeConns::iterator i = conns().find(this);
			if(i == conns().end()) return;
			i->remove(sig, dst);
			if(i->size() == 0) conns().remove(this);
		}
	

		// returns list of all connections with signal 'sig'
		NodeList conns(int sig) {
			NodeList nl;
			typename NodeConns::iterator i = conns().find(this);
			if(i == conns().end()) return nl;

			typename ConnTable::iterator ci;
			for(ci = i->find(sig); ci != i->end() && ci.key() == sig; ci++)
				nl.append((TNode*)ci.value());

			return nl;
		}


		// broadcast signal 'sig' to all subscribed nodes
		void bcast(int sig, void *data=0) {
			NodeList nl = conns(sig);
			foreach(TNode *n, nl) {
				((TNode*)n)->reciv(this, sig, data);
			}
		}

		virtual void reciv(Node *src, int sig, void *data) {
		}

	protected:
		virtual TLabel regLabel() {
			return graph()->mCounter++;
		}

		friend class HexGraph;

		NodeTable &nodes() {return graph()->nodes();}
		NodeConns &conns() {return graph()->conns();}

#ifndef HEX_GRAPH_STATIC
		HexGraph *mGraph;
#endif
	};


#ifdef HEX_GRAPH_STATIC
private:
#endif
	HexGraph() {
		mCounter = 0;
	}

	~HexGraph() {
		clear();
	}
#ifdef HEX_GRAPH_STATIC
public:
#endif

	int size() {
		return mNodes.size();
	}

	int totalConns() {
		int total = 0;
		typename NodeConns::iterator i;
		for(i = conns().begin(); i != conns().end(); i++)
			total += i->size();
		return total;
	}

	NodeTable &nodes() {
		return mNodes;
	}

	NodeConns &conns() {
		return mConns;
	}

	NodeConns &stack() {
		return mStack;
	}

	void squeeze() {
		nodes().squeeze();
		conns().squeeze();

		typename NodeConns::iterator i;
		for(i = conns().begin(); i != conns().end(); i++)
			i->squeeze();
	}

	void clear() {
		typename NodeTable::iterator i;
		for(i = nodes().begin(); i != nodes().end(); i++)
			delete i.key();

		nodes().clear();
		conns().clear();
		squeeze();
		mCounter = 0;
	}

	QString debugInfo() {
		return QString("nodes:%1").arg(nodes().size())
			+ QString(", conns:%1").arg(totalConns())
		;
	}
#ifdef HEX_GRAPH_STATIC
	static HexGraph &graph() {
		return mGraph;
	}
#endif


private:
	friend class Node;
	int mCounter;
	NodeTable mNodes;
	NodeConns mConns;
	QStack<Command> mStack;
#ifdef HEX_GRAPH_STATIC
	static HexGraph mGraph;
#endif
};

#ifdef HEX_GRAPH_STATIC
template <typename TNode, typename TLabel>
HexGraph<TNode,TLabel> HexGraph<TNode,TLabel>::mGraph;
#endif

#endif

